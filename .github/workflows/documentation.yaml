name: documentation

on: [push, pull_request, workflow_dispatch]

permissions:
  contents: write # Needed to push to gh-pages branch
  pages: write    # Needed for actions/deploy-pages
  id-token: write # Needed for actions/deploy-pages

jobs:
  docs:
    # if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Important for sphinx-multiversion to get tags

      - name: Install uv
        run: pipx install uv

      - name: Build docs
        run: |
          # Setup Python environment and install dependencies
          uv sync
          uv pip install --group doc # Ensure sphinx-multiversion is in this group
          source .venv/bin/activate # Activate the virtual environment

          echo "Building documentation with sphinx-multiversion..."
          # Clean any previous build output and create the html directory
          rm -rf html
          mkdir html
          # Build documentation. Output will be in $GITHUB_WORKSPACE/html/
          sphinx-multiversion docs/ html/
          # Copy the main index file
          cp docs/assets/index.html html/index.html

          echo "Documentation built in $GITHUB_WORKSPACE/html/"
          ls -lA "$GITHUB_WORKSPACE/html/"

          # Configure Git user for commit
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions-bot@users.noreply.github.com"

          # Store current branch/ref to switch back later
          CURRENT_REF=$(git rev-parse --abbrev-ref HEAD)
          if [ "$CURRENT_REF" = "HEAD" ]; then # If in detached HEAD state (e.g., on a tag)
            CURRENT_REF=$(git rev-parse HEAD) # Get the full commit SHA
          fi
          echo "Current reference is $CURRENT_REF"

          echo "Switching to gh-pages branch..."
          git fetch --all # Ensure all remote branches are available
          # Create gh-pages if it doesn't exist locally, then checkout
          if git rev-parse --verify origin/gh-pages > /dev/null 2>&1; then
            git checkout gh-pages
            git pull origin gh-pages # Ensure it's up-to-date
          else
            git checkout --orphan gh-pages
          fi
          
          echo "Cleaning gh-pages branch working directory (current dir: $(pwd))..."
          # Remove all existing files in the gh-pages branch root to avoid conflicts.
          # This deletes all files and directories except for the .git directory itself.
          # Use git rm for tracked files, then a find command for untracked.
          git rm -rf . '*' > /dev/null 2>&1 # Stage deletions of all tracked files/dirs
          # Remove any remaining untracked files/dirs (except .git)
          find . -maxdepth 1 -not -name '.git' -not -name '.' -not -name '..' -exec rm -rf {} \;

          echo "Copying built documentation from $GITHUB_WORKSPACE/html/ to gh-pages root..."
          # Use rsync to copy the new site content from the original build location.
          # The trailing slash on the source ($GITHUB_WORKSPACE/html/) means "copy the contents of this directory".
          # --delete ensures that files/directories in the destination (gh-pages root)
          # that are NOT in the source (the new build) are removed.
          rsync -av --delete "$GITHUB_WORKSPACE/html/" .

          echo "Committing and pushing to gh-pages..."
          git add .

          # Check if there are any changes to commit
          if git diff-index --quiet HEAD --; then
            echo "No changes to commit to gh-pages."
          else
            git commit -m "Deploy documentation from ref ${{ github.ref }} (commit ${{ github.sha }})"
            git push origin gh-pages
          fi

          echo "Switching back to original ref: $CURRENT_REF"
          git checkout "$CURRENT_REF"

      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # This path is relative to $GITHUB_WORKSPACE after checking back to CURRENT_REF.
          # It should point to the directory that sphinx-multiversion originally built into.
          path: html/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        # This action uses the artifact uploaded in the previous step.
