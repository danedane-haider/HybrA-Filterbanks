name: documentation

on: [push, pull_request, workflow_dispatch]

permissions:
  contents: write # Needed to push to gh-pages branch
  pages: write    # Needed for actions/deploy-pages
  id-token: write # Needed for actions/deploy-pages

jobs:
  docs:
    # if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Important for sphinx-multiversion to get tags

      - name: Install uv
        run: pipx install uv

      - name: Build docs
        run: |
          # Setup Python environment and install dependencies
          uv sync
          uv pip install --group doc # Ensure sphinx-multiversion is in this group
          source .venv/bin/activate # Activate the virtual environment

          echo "Building documentation with sphinx-multiversion..."
          # Clean any previous local build html dir and ensure output path is clear
          rm -rf "$GITHUB_WORKSPACE/html"
          # Build documentation. Output will be in $GITHUB_WORKSPACE/html/
          # Using an absolute path for sphinx-multiversion output for clarity
          sphinx-multiversion docs/ "$GITHUB_WORKSPACE/html/"
          # Copy the main index file
          cp "$GITHUB_WORKSPACE/docs/assets/index.html" "$GITHUB_WORKSPACE/html/index.html"

          echo "Documentation built in $GITHUB_WORKSPACE/html/"
          ls -lA "$GITHUB_WORKSPACE/html/" # List contents for verification

          # === Critical: Check if build output exists and is not empty ===
          if ! [ -d "$GITHUB_WORKSPACE/html" ] || ! [ "$(ls -A $GITHUB_WORKSPACE/html)" ]; then
            echo "Error: Build output directory $GITHUB_WORKSPACE/html is empty or does not exist after build."
            exit 1
          fi

          echo "Moving build artifacts to a temporary location..."
          TEMP_BUILD_DIR=$(mktemp -d) # Create a temporary directory
          # Move the entire 'html' directory into the temporary location
          mv "$GITHUB_WORKSPACE/html" "$TEMP_BUILD_DIR/build_output"
          echo "Build artifacts moved to $TEMP_BUILD_DIR/build_output"
          ls -lA "$TEMP_BUILD_DIR/build_output" # Verify contents in new location

          # Configure Git user for commit
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions-bot@users.noreply.github.com"

          # Store current branch/ref to switch back later
          CURRENT_REF=$(git rev-parse --abbrev-ref HEAD)
          if [ "$CURRENT_REF" = "HEAD" ]; then # If in detached HEAD state (e.g., on a tag)
            CURRENT_REF=$(git rev-parse HEAD) # Get the full commit SHA
          fi
          echo "Current reference is $CURRENT_REF"

          echo "Switching to gh-pages branch..."
          git fetch --all # Ensure all remote branches are available
          if git rev-parse --verify origin/gh-pages > /dev/null 2>&1; then
            git checkout gh-pages # This will set up tracking if not already
            git pull origin gh-pages # Ensure it's up-to-date with remote
          else
            echo "gh-pages branch does not exist on origin. Creating a new orphan branch."
            git checkout --orphan gh-pages
          fi
          
          echo "Cleaning gh-pages branch working directory (current dir: $(pwd))..."
          # Remove all existing TRÃ„CKED files in the gh-pages branch root.
          # --ignore-unmatch prevents error if no files are matched (e.g., new orphan branch)
          git rm -rf --ignore-unmatch . '*' > /dev/null 2>&1
          # Remove any remaining UNTRACKED files and directories from the root,
          # being careful not to remove .git itself.
          find . -maxdepth 1 -not -name '.git' -not -name '.' -not -name '..' -exec rm -rf {} + 2>/dev/null

          echo "Copying built documentation from $TEMP_BUILD_DIR/build_output/ to gh-pages root..."
          # Use rsync to copy the new site content from the preserved temporary location.
          # The trailing slash on the source "$TEMP_BUILD_DIR/build_output/" means "copy the contents of this directory".
          rsync -av --delete "$TEMP_BUILD_DIR/build_output/" .

          echo "Committing and pushing to gh-pages..."
          git add .

          if git diff-index --quiet HEAD --; then
            echo "No changes to commit to gh-pages."
          else
            git commit -m "Deploy documentation from ref ${{ github.ref }} (commit ${{ github.sha }})"
            git push origin gh-pages
          fi

          echo "Switching back to original ref: $CURRENT_REF"
          git checkout "$CURRENT_REF"

          echo "Cleaning up temporary build directory: $TEMP_BUILD_DIR"
          rm -rf "$TEMP_BUILD_DIR""

      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # This path is relative to $GITHUB_WORKSPACE after checking back to CURRENT_REF.
          # It should point to the directory that sphinx-multiversion originally built into.
          path: html/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        # This action uses the artifact uploaded in the previous step.
